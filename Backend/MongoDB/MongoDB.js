{   // Mongo Shell

    sudo service mongod start
    sudo service mongod restart
    sudo service mongod stop

    // запустить mongo shell
    mongo

    // Использовать БД local, если ее нет, то создать и подключиться.
    // По умолчанию используется БД test
    use local

    // Обращение к коллекции (posts) экземпляря БД (db)
    db.posts
}



// Методы коллекций

{   // Разные методы

    // Количество документов в коллекции users
    db.users.count()  // => number


    // <<Примеры>>
    // Возвращает количество документов, удовлетворяющих указанному условию в коллекции users
    db.users.find({name: "John"}).count()
}



{   // Вставка

    // Вставить в коллекцию users документ entry
    db.users.insert(entry: object);


    // <<Примеры>>
    // Вставить в коллекцию users объект entry с некими данными
    db.users.isnert({name: "Alex", age: 35})  // => WriteResult({ "nInserted" : 1 })
}



{   // Удаление

    // Удаляется все записи, которые соответствуют указанному селектору
    db.users.remove(selector: object)

    // Удаляет коллекцию целиком
    db.users.drop()
}



{   // Чтение
    {   // вспомогательные операторы для чтения

        // Селекторы достаточно сильно влияют на производительность,
        // поэтому использовать их нужно крайне осторожно

        $gt: 36  // значение большее 36
        $gte: 36  // значение большее или равное 36
        $lt: 36  // значение меньшее 36
        $lte: 36  // значение меньшее или равное 36
        $ne: 36  // значение не равное 36
        $regex: /(Java|Script)/  // значение Java или JavaScript
        $or: [{ age: 30 }, { age: 35 }]  // значение age равное 30 ИЛИ 35
        // $and: на практике то же самое, что и написать поля через запятую
        $and: [{ name: "Alex" }, { age: 35 }]  // значение name равное "Alex" И значение age равное 35

        $exists: true  // проверяет наличие (true) или отсутствие (false) поля в документе
        $type: 2  // проверяет поле в документе на тип string (2), все типы https://docs.mongodb.com/manual/reference/bson-types/

        $in: ["Node.js", 123, "some value"]  // проверяет вхождение хотябы одного из указанных значений в массиве в поле документа
        $all: ["Node.js", 123, "some value"]  // то же самое, что и $in, только ищет вхождение всеъ указанных значений

        // <<Примеры>>
        // Найти в коллекции users все документы, где есть поле "age", которое больше 36
        db.users.find({ age: { $gt: 36 } });

        // Найти в коллекции users все документы, где есть поле "age", которое меньше 36
        db.users.find({ age: { $lt: 36 } });

        // Найти в коллекции users все документы, где есть поле age, которе равно 30 ЛИБО 35
        db.users.find({$or: [
            {age: 30},
            {age: 35}]
        });

        // Найти в коллекции users все документы, где есть поля name и age, в то время
        // как name должно быть равно "Alex" и age должно быть равно 35
        db.users.find({$and: [
            {name: "Alex"},
            {age: 35}
        ]});

        // Найти в коллекции users все документы в которых присутствует поле age
        db.users.find({age: {$exists: true}})

        // Найти в коллекции users все документы в которых отсутствует поле age
        db.users.find({age: {$exists: false}})

        // Найти в коллекции users все документы в которых есть полу age с типом number
        // Все типы: https://docs.mongodb.com/manual/reference/bson-types/
        db.users.find({age: {$type: 1}})

        // posts - массив ["Node.js", 123, "some value"]
        // Найти в коллекции users документы с полем posts со значением Node.js, но т.к. в данном случае
        // posts - это массив, то MongoDB сам переберет его и вернет документ, если будет найдено значение.
        // MongoDB не ищет во вложенных массивах
        db.users.find(posts: "Node.js")

        // Найти в коллекции users документы с полем posts, если posts - массив, то оператор $in:
        // найдет вхождение либо "Node.js" либо "some value" в этот массив. И вернет найденные документы
        // с данным вхождением.
        db.users.find(posts: {$in: ["Node.js", "some value"]})

        // Найти в коллекции users документы с полем posts, если posts-массив, то нам нужны все указанные вхождения
        db.users.find(posts: {$all: ["Node.js", "some value"]})
    }

    // Прочитать все документы коллекции users
    db.users.find()

    // Прочитать и вернуть все документы коллекции users, удовлетворяющие указонному селектору
    // можно передать объект fields, тогда в ответ будут включены только указанные поля
    db.users.find(selector: object, fields?: object)  // => {cursor}

    // Прочитать все документы коллекции users и вернуть один документ, удовлетворяющий указонному селектору
    // можно передать объект fields, тогда в ответ будут включены только указанные поля
    db.users.findOne(selector: object, fields?: object)  // => {document}


    // <<Примеры>>
    // Найти в коллекции users все документы, где есть поле "age", которое меньше 36
    db.users.find({ age: { $lt: 36 } });

    // Найти в коллекции users все документы, в которых есть поле name и оно равно "Alex",
    // но в качестве ответа включить только поля "_id" и "age"
    db.users.findOne({ name: "Alex" }, { age: true });  // => { "_id": ObjectId("58a03f7e9639db1a5aaa4e97"), "age": 15  }
}


{   // Обновление
    {   // вспомогительные операторы для обновления

        // для обычных полей
        $set: {name: "Alex"}  // не заменить, а именно обновить ключ name в сопоставленном документе
        $inc: {age: 2}  // обновить числовое поле age, прибавив к нему 2
        $uncet: {age: ""}  // удалить поле age в документе

        // для массива
        $set: {"posts.2": "editing value"}  // обновить теритй элемент массива posts на указанное значение
        $uncet: {"posts.3": ""}  // удалить четвертый элемент массива posts
        $push: {posts: "new last value"}  // добавить новй элемент в конец массива posts
        $pop: {posts: -1}  // удалить первый элемент массива posts
        $pop: {posts: 1}  // удалить последний элемент массива posts
        $pull: {posts: "value"}  // удалить элемент массива posts со значением "value"
        $pushAll: {posts: ["value", "value2"]}  // добавить элемнеты указанного массива в массив posts
        $pullAll: {posts: [0, 5]}  // удаляет все элементы указанного массива из массива posts
        $addToSet: {posts: "new value", "new value 2"}  // если в массиве posts есть указанное значение, то ничего не делает, иначе добавляет его


        // <<Примеры>>
        // Найти в коллекции users документ с _id==1, и обновить его поле name
        db.users.update({_id: 1}, {$set: {name: "John Smitt"}})

        // Найти в коллекции users документ с _id==1 и обновить его числовое поле age, прибавив к нему -3
        db.users.update({_id: 1}, {$inc: {age: -3}})

        // Найти в коллекции users документ с _id==1 и удалить у него поле age
        db.users.update({_id: 1}, {$unset: {age: 1}})

        // posts - массив
        // В коллекции users найти документ с name=="John" и обновить первый элемент массива posts на указанную строку
        db.users.update({name: "John"}, {$set: {"posts.0": "UPDATING FIRST ELEMENT OF ARRAY"}})

        // В коллекции users найти документ по указанному условию и добавить новый элемент в конец массива posts
        db.users.update({name: "John"}, {$push: {posts: "new last value"}})

        // В коллекции users найти документ по указанному условию и удалить первый элемент массива posts
        db.users.update({name: "John"}, {$pop: {posts: -1}})

        // В коллекции users найти документ по указанному условию и удалить последний элемент массива posts
        db.users.update({name: "John"}, {$pop: {posts: 1}})

        // В коллекции users найти документ по указанному условию и удалить элемент массива posts со значением "value"
        db.users.update({name: "John"}, {$pull: {posts: "value"}})

        // В коллекции users найти документ по указанному условию и добавить все элементы указанного массива в массив posts
        db.users.update({name: "John"}, {$pushAll: {posts: ["value", "value2"]}})

        // В коллекции users найти документ по указанному условию и удалить все элементы указанного массива из массива posts
        db.users.update({name: "John"}, {$pullAll: {posts: [0, 5]}})

        // В коллекции users найти документ по указанному условию и проверить:
        // есть ли в массиве posts указанные значение, если есть, то ничего не делать, иначе добавить.
        // проверку проходит каждый элемент
        db.users.update({name: "John"}, {$addToSet: {posts: "new value", "new value2"}})
    }

    // Перезаписывает объект, найденный с помощью selector на новый объект newFields
    db.users.update(selector: object, update: object, option: object)
    {  // option
        upsert: boolean,  // если при попытке обновления документа, он не найден, то доабавить его в коллекцию
        multi: boolean,  // если функцией db.users.update с помощью первого параметра найдено несколько документов, до обновить всех (ture) или только первый (false)
        writeConcern: <document>,
        collation: <document>
    }


    // <<Примеры>>
    // В коллекции users объект с _id равным 1 заменить все прочие поля на поля из указанного объекта (name: "Alexandr")
    // т.е. идет именно перезапись, а не обновление, для обновления нужно использовать вспомогательные операторы
    db.users.update({_id: 1}, {name: "Alexandr"})
}


// Допустим, когда мы используем метод find() какой-либо коллекции, find() вернет так называемый cursor, а Mongo Shell
// автоматически отобразит этот cursor на экране. Cursor - это обычный объект, у которого есть метод next() для переборы
// полученных документов, который как раз используется Mongo Shell`ом для развертки ответа на экран.
// Грубо говоря, cursor - результат выполнения db.collection.find()
{   // Cursor

    // Проверяет, есть ли следующия запись
    cursor.hasNext()  // => boolean

    // Возвращает (переходит) к следующей записи
    cursor.next()

    // Сортирует документы по указанному полу field, по возрастанию (value = 1) или по убыванию (value = -1)
    cursor.sort({ field: value })  // => {cursor}

    // "Перескакивает" через первые n документов
    cursor.skip(n)  // => {cursor}

    // Выводить n записей
    cursor.limit(n)  // => {cursor}
}

/*** <<< Коды состояния >>> ***/
{  // 2xx
	200  // => ок
}
{  // 3xx
	301  // => ресурс перемещен навсегда (кеширует перенаправление, поэтому иногда игнор. обр. формы)
	302  // => ресурс временно перемещен (не кеширует перенаправление)
	303  // => смотрите другой ресурс (не кеширует перенаправление)
}
{  // 4xx
	404  // => не найдено
}
{  // 5xx
	500  // => ошибка сервера
}
// Полный список http-кодов: http://bit.ly/1TxmFAe



/*** <<< Адресная строка >>> ***/
// Важно понимать, что мы можем интерпретировать строку запроса (и не только)
// по своему, не обязательно там должен быть именно знак '?'

// https://www.google.com/#q=express
// http:// - протокол
// www.google.com - имя хоста
// / - путь
// '' - пустая строка запроса (тут ее нет)
// #q=express - фрагмент

// http://localhost:8080/about?test=1#history
// http:// - протокол
// localhost - имя хоста
// 8080 - номер порта
// /about - путь
// ?test=1 - строка запроса
// #history - фрагмент



/*** <<< RESTfull API >>> ***/

// 1 вариант:
//
// PUT - для обновления
// POST - для добавления
// GET - для получени
// DELET - для удаления

// 2 вариант:
//
// Всегда использовать POST со ссылками вида:
// /products/add
// /products/destroy
// /products/get



/*** <<< Форматы, заголовки, кодировки, стандарты >>> ***/

// Ответа:
//
'Content-Type': 'text/html' || 'text/plain' || 'application/json' || 'application/xml' || 'text/xml'
'Content-Disposition': 'attachment'
'Set-Cookie': 'max-age=3600; secure=true';  // Пример заголовка для отправки Cookie
{  // Контроль над кэшированием
	// Важно!!! Если мы используем кэширование в 1 год, топ при обновлении
	// ресурса пользователь не увидит этих обновлений целый год. Чтобы исправить данную
	// проблему нужно использовать "сигнатуры"!
	// Можно устанавливать эти заголовки вручную, во многих
	// крупных CDN эти заголовки по-умолчанию работают "хорошо".
	// Тут как-то фигурирует Nginx?

	'Expires' / 'Cache-Control'
	'Last-Modified' / 'ETag'
}

// Запроса:
//
// Формат данных для тела запроса POST и GET
application/x-www-form-urlencoded  // закодированные пары 'имя'='значение'&'имя'='значение' (такой же как в обычном GET)
multipart/form-data  // если требуется поддержка загрузки файлов на сервер
application/json  // для AJAX

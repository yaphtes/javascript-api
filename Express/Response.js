// Properties

// Ссылка на экземпляр приложения
res.app

// Геттер, проверяет, отправились ли HTTP-заголовки клиенту
res.headersSent

// Объект, который содержит локальные переменные ответа текущего цикла запрос-ответ, и, следовательно,
// доступен только для данного цикла запрос-ответ. В противном случае, это свойство идентично app.locals.
res.locals


// Methods

// Устанавливает заголовок ответа. Врят ли в обычных условиях это будет делатся вручную.
res.append(field [, value]) / res.set(fiels [, value])

// Возаращает значение HTTP заголовка ответа
res.get(field)

// Устанавливает код состояния HTTP. По умолчанию в Express код состояния - 200 ('ОК').
// Это значит, что его нужно использовать практически только для 404 и 500 кодов. Так как
// для перенаправлений лучше использовать метод res.redirect();
res.status(code)

// Выполняет перенаправление браузера. Код перенаправления по умолчанию - 302 (найдено).
// В целом лучше минимизировать перенаправления, за исключением случая
// окончательного перемещения страницы, когда следует использовать код 301.
res.redirect([status], url)

// Отправляет ответ клиенту с необазательным кодом состояния. По умолчанию в
// Express используется тип содержимого text/html, так что, если мы захотим
// изменить его на text/plain, например, необходимо вызвать res.set('Content-Type': 'text/plain')
// перед вызовом res.send(). Если тело - объект или массив, вместо этого ответ будет отправлен в виде
// JSON (с установленным соответствующим типом содержимого), хотя, хотя, если мы захотим отправить JSON,
// лучше делать это явным образом путем вызова res.json()
res.send(body) / res.send(status, body)

// Отправляет ответ клиенту в качестве ответа будет statusCode. То же самое, что и app.status(statusCode).send();
res.sendStatus(statusCode)

// Отправляет JSON клиенту с необязательным кодом состояния
res.json(json) / res.json(status, json)

// Отправляет JSONP клиенту с необязательным кодом состояния
res.jsonp(json) / res.jsonp(status, json)

// Удобный метод для установки заголовка Content-Type. Практически эквивалентен
// res.set('Content-Type': type). Оно немного более умное, т.к. может правильно
// поставить тип данных интернета по расширению файла, например: res.type('txt')
// Результатом будет 'Content-Type': 'text/plain', но лучше данной возможности
// избегать, и ставить тип данных интернета явным образом.
res.type(type)

// Этот метод позволяет отправлять разнообразное содержимое в зависимости от заголовка
// Accept запроса. Он в основном используется в различных API, и оно обсуждается подробнее
// в главе 15. Вот очень простой пример: res.format({'taxt/plain': 'Hello!, 'text/html': <b>Hello!</b>});
res.format(object)

// Оба этих мемтода устанавливают заголовок ответа Content-Disposition в значение attachment;
// это указывает браузеру загружать содержимое вместо отображения его в браузере. Можно задать
// filename в качестве подсказки браузеру. С помощью
// res.download() можно задать файл для скачивания, в то время как
// res.attachment() просто устанавливает заголовок и вам все еще нужно будет отправить контент клиенту.
res.attachment([filename]) / res.download(path, [filename], [callback])

// Этот метод читает файл, заданный параметром path, и отправляет его содержимое клиенту.
// Этот метод редко оказывается нужен - проще использовать промежуточное ПО static
// и разместить файлы, которые мы хотитм сделать доступными клиенту, в каталоге public.
// Оданко, если мы хотмм выдать другой ресурс с того же URL в зависимости от какого-либо
// условия, этот метод может оказаться полезен.
res.sendFile(path, [options], [callback])

// res.locals - объект, содержащий контекст ПО УМОЛЧАНИЮ для визуализации представлений.
// res.render - визуализирует представление, используя указанный в настройках шаблонизатор
// (не путать параметр locals в res.render с res.locals он перекрывает контекст в res.locals,
// но не перекрытый контекст по-прежнему будет доступен). Обратите внимание на то, что res.render
// по умолчанию будет приводить к коду состояния ответа 200; используйте res.status для указания
// других кодов состояния. Визуализация представлений - отдельная, не маленькая тема.
res.locals / res.render(view, [locals], callback)

// Задает заголовок ответа Links. Это узкоспециализированный заголовок, редкоиспользуемый
// в большинстве приложений.
res.links()

// Adds the field to the Vary response header, if it is not there already.
// Example: res.vary('User-Agent').render('docs')
res.vary(field)

// Устанавливает или очещает куки-файлы, которые будут храниться на клиенте.
// Требуется поддержка промежуточного ПО cookie-parser
res.cookie(name, value, [options]) / res.clearCookie(name, [options])
{  // options
    // в качестве параметров для куки файлов может быть переданы следующие атрибуты

    domain
    path
    maxAge
    httpOnly  // куки-файл может менять только сервер
    secure  // только через https
    signed  // подписать куки-файл?
}

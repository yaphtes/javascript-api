Ветки позволяют деверсифицировать разработку
Технически ветки в гит - это ссылки на коммиты. Они ссылаются на вершину коммитов ответвления.


##### Ветки #####

git branch - посмотреть ветки проекта
git branch <branch> - создать ветку <branch>
git branch <branch> <commit> - создать ветку, которая указывает на коммит (например, для скорого восстановления недостижимых коммитов, или восстановления случайного удаления ветки)
--флаги git branch ...
-v - посмотреть ветки проекта и показать вершину ветки
-d <branch> - удалить ветку, перед этим необходимо слияние
-D <branch> - принудительно удалить ветку
-f <branch> <commit> - создать ветку на указанный коммит, если существует, то переместить. Необходимо быть в другой ветке.

git checkout <branch> - переместить HEAD на ветку
git checkout <commit> - переместить HEAD на коммит (состояние отделенной HEAD)
git checkout <paths> - восстанавливает состояние рабочей дериктории из индекса
git checkout <commit> <paths> - восстанавливает рабочую дерикторию из <commit>
-- флаги git checkout ...
-b <branch> - создать ветку и переключиться на нее
-b <branch> <commit> - создать ветку на коммите и переключиться на нее
-B <branch> <commit> - создать ветку на коммите и переключиться на нее. Если ветка существует, то переместить ветку
-f <branch> - принудительное переключения ветки. Yезакоммиченные изменения уничтожаются.
!!!
PS: checkout, при переключении, сохраняет изменения файла, если эти файлы в разных ветках одинаковы
и помечает файлы флагом M в выводе в консоль, при переключении ветки. Внимательно следим за этим
флагом, чтобы случайно не применить изменения из одной ветки к другой.
С другой стороны, такое поведение checkout МОЖНО И ДАЖЕ НУЖНО НУЖНО использовать для вынесения
больших незакоммиченных изменений в отдельную ветку. - такое случается, когда изначально
предполагался небольшой фикс или фича, но в итоге изменения оказываются огромными и времени на их
реализацию не хватает. Тогда выделяем незакоммиченные изменения в отдельную ветку и доделываем позже.



##### Архивация #####

git stash - поместить все незакоммиченные изменения в специальную архивированную структуру данных git
git stash pop - добавить данные из git stash



##### Прочее #####

git cherry-pick <commits> - скопировать коммиты на текущую ветку
git merge <branch> - слить изменения в текущую ветку из ветки <branch>



##### История #####

git log - просмотр полной истории коммитов
git log <branch> - просмотр истории коммитов ветки
git log <tag> - просмотр истории коммитов, начиная с тега
--флаги
--oneline - в одну строку
--decorate - декорировать (например, отобразить теги и ветки)

git show :/<regexp> || <string> - просмотр коммита с поиском по его описанию
git show <commit> - просмотр коммита
git show <commit>:<file> - просмотр файла на состояние коммита
git show :<file> - просмотр файла в индексе
--флаги
--quiet - только информация коммита, без самих изменений
--pretty=fuller - показать не только автора но и коммитера

git reflog <branch> - просмотр рефлога ветки
--флаги
--date=iso - указать дату коммитов (полезно, если мы помним примерную дату коммитов)
--pretty=short - чуть более подробная информация коммитов, например, добавляет авторов коммитов

### Сборка мусора ###
https://www.youtube.com/watch?v=32dlNvz5OEo&list=PLDyvV36pndZHkDRik6kKF6gSb0N0W995h&index=28

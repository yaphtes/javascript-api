[] - необязательный элемент


##### Сравнение коммитов и файлов #####

git diff <commit-1> <commit-2> [<paths>] - сравнить два коммита
git diff <commit-1>..<commit-2> [<paths>] - сравнить два коммита
git diff <commit-1>...<commit-2> [<paths>] - что изменилось в <commit-2> с момента его отхождения от <commit-1>
git diff [<paths>] - сравнить рабочую дерикторию с индексом
git diff <commit> [<paths>] - сравнить рабочую дерикторию с репозиторием на момент коммита
--флаги git diff ...
--cached - сравнить индекс с репозиторием (покажет, что попадет в ближайший коммит)
--staged - сравнить индекс с репозиторием (покажет, что попадет в ближайший коммит)
--name-only - покажет только пути, без деталей
--word-diff - сравнение по словам (слово - это последовательность символов без пробела)

git diff <commit-1>:<path-1> <commit-2>:<path-2> - сравнить разные файлы из разных коммитов
git diff --no-index <path-1> <path-2> - сравнить два файла в любом месте на HDD (работает отдельно от git)



##### Логирование комиттов #####

git log <branches> [<paths>] - вывести достижимые коммиты ветки
git log <branch-1> ^<branches> [<paths>] - лог коммитов <branch-1>, исключить коммиты, достижимые из веток <branches>
git log <branch-1>..<branch-2> [<paths>] - лог коммитов <branch-2>, с момента ее отхождения от <branch-1>
git log <branch-1>...<branch-2> [<paths>] - коммиты достижимые из <branch-1> или из <branch-2>, но не из их обоих одновременно
--флаги git log ...
--graph - добавить структуру, какая ветка к какой относится (при выводе коммитов нескольких веток)
--boundary - добавить пограничный коммит, т.е. тот, на котором ветки разделились
--follow - если указан <path> и файл был переименован, то git найдет предыдущее его имя и продолжит историю для него
-----
--grep <string>|<regex> - найти комитты, где в описании коммита есть слово по <regex> или слово <string>. Флаг можно указывать несколько раз. Выводит комитты, которые соответсвуют первому совпадению или второму.
--all-match - необходимость соответствия всех флагав --grep, если указаны больше одного
-P - perl-совместимые регулярные выражения
-F - отключить регулярные выражения, поисковая строка воспринимается, как обычный текст
-i - отключить чувствительность к регистру
-----
-G <regex> - коммиты с изменениями попадающих под <regex>
-L <number-line-1>,<number-line-2>:<path> - коммиты с изменениями в файле <path>, где изменения прводились с <number-line-1> по <number-line-2> строку
-L <regex-1>,<regex-2>:<path> - коммиты с изменениями в файле <path>, где изменения прводились со строки, попадающей под <regex-1> по строку, соответствующей <regex-2>
--author=<name> - коммиты автора или автора с его имейлом
--commitetr=<name> - коммиты коммиттера или коммиттера с его имейлом
--before '2017-09-13 08:30:00' - комитты до указанной даты
--after '2017-09-13 08:30:00' - комитты позже указанной даты
-----

P.S.: если указан <paths> то git log укажет только те коммиты, в которых менялись указанные файлы



##### Кто написал эту строку #####

git blame <path> - показывает авторов изменений построчно у данного файла
--флаги git blame ...
--date=short - укоротить дату
--L - флаг, аналогичный из git log


##### Оформление git log (форматирование) #####

https://www.youtube.com/watch?v=sX0u-27H0Vg&index=42&list=PLDyvV36pndZHkDRik6kKF6gSb0N0W995h

В данном разделе описаны различные жизненные ситуации, которые могут возникнуть в проектах
и вариации их решения. Если нужно просто узнать всё о команде, достаточно ввести git help <команда>
<path> - замещаем на значение
[] - необазательный параметр
|| - или


##### Настройка #####

### Первоначальная настройка
git config --global user.name "<username>"
git config --global user.email <email>
git config --global core.editor <editor>

### Проверка настроек
git config --list



##### Создание репозитория ######

### Инициализация репозитория в существующей папке
git init
git add --all
git commit -m "initial commit"

### Клониерование существующего репозитория
git clone <url> [<path>]



##### Сапись изменений в репозиторий ######

### Проверка состояние файлов
git status || git status -s

### Слежение за новыми файлами
git add <file> || git add --all

### Игнорирование файлов .gitignore
*.a пропускать файлы, заканчивающиеся на .a
!lib.a но отслеживать файлы Lib.a, несмотря на пропуск файлов на .a
/TODO игнорировать только корневой файл TODO, а не файлы вида subdir/TODO
build/ игнорировать все файлы  в папке build/
doc/*.txt игнорировать doc/notes.txt, но не doc/server/arch.txt

### Просмотр индексированных и неиндексированных изменений
git diff - что было изменено, но пока не проиндексировано
git diff --stage - что из проиндексированного войдет в следующий коммит. Эта команда сравнивает индексированные изменения с содержимым последней зафиксированной версии

### Фиксация изменений
git commit || git commit --m <message>

### Пропуск области индексирования
git commit -a - если новый файл ранее был добавлен в область индексирования, то в будущем можно пропускать дальнейшие git add <file>, используя данную команду

### Удаление файлов


### Перемещение файлов



##### Просмотр истории версий #####
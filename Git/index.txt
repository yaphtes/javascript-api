В данном разделе описаны различные жизненные ситуации, которые могут возникнуть в проектах
и вариации их решения. Если нужно просто узнать всё о команде, достаточно ввести git help <команда>
<path> - замещаем на значение
[] - необазательный параметр
|| - или


##### Настройка #####

### Первоначальная настройка
git config --global user.name "<username>"
git config --global user.email <email>
git config --global core.editor <editor>

### Проверка настроек
git config --list



##### Создание репозитория ######

### Инициализация репозитория в существующей папке
git init
git add --all
git commit -m "initial commit"

### Клониерование существующего репозитория
git clone <url> [<path>]



##### Запись изменений в репозиторий ######

### Проверка состояние файлов
git status || git status -s

### Слежение за новыми файлами
git add <file> || git add --all

### Игнорирование файлов .gitignore
*.a пропускать файлы, заканчивающиеся на .a
!lib.a отслеживать файлы lib.a, несмотря на пропуск файлов на .a
*.py[co] игнорировать *.pyc или *.pyo, но не *.pyco
migrate-201[5-7]* игнорировать migrate-2015.cls, migrate-2016.bak, migrate-2017-lol.txt
*.py? игнорировать *.pyc, *.pyo, но не .py

(ЗАМЕЧАНИЕ: если где-то, кроме как в конце есть "/", то путь отсчитывается от корня)
build/ игнорировать папки build/ на любом уровне вложенности
/build/ игнорировать папку build/ в корне
secret/key то же самое, что и /secret/key
doc/*.html то же самое, что и /doc/*.html
**/secret/key игнорировать key на любом уровне вложенности
users/*/private например users/john/private или users/alex/private
users/**/private например users/john/private или users/john/smith/private

/install/**
!install/packages.json игнорировать все файлы в /install/, но не файл packages.json. Если вместо /install/** написать /install/, то так не сработает, гит тупо заигнорит папку, а не файлы в ней


### Просмотр индексированных и неиндексированных изменений
git diff - что было изменено, но пока не проиндексировано
git diff --stage - что из проиндексированного войдет в следующий коммит. Эта команда сравнивает индексированные изменения с содержимым последней зафиксированной версии

### Фиксация изменений
git commit || git commit --m <message>
git commit --author="John Smith" --date="..." - коммит с указанием автора изменений
git reset HEAD ... - удалить ненужные данные из области индексирования
git commit -a - закомитить изменения отслеживаемых файлов с пропуском стадии добавлении в индекс
git commit <paths> - закомитить изменения отслеживаемого файла по указанному пути с пропуском стадии добавлениия в индекс

### Пропуск области индексирования
git commit -a - если новый файл ранее был добавлен в область индексирования, то в будущем можно пропускать дальнейшие git add <file>, используя данную команду

### Удаление файлов
git add <file/dir> добавить факт удаления файла в индекс (удаление производилось пользователем вручную)
git rm <file>/git rm -r <dir> удалить файл\папку и добавить это изменение в индекс
git rm --cached ... (то же самое, что и git reset HEAD) - удалить из индекса, но оставить (сделать untracked) в рабочей директории
--cached - смысл ключа в том, чтобы работать с индексом, а не с рабочей директорией


### Переименование и перемещение файлов
git mv index.html hello.html - переименовать файл и записать это изменение в индекс


##### Просмотр истории версий #####

**** - первые четыре цифры идентификатора коммита
git show **** - посмотреть коммит
--pretty=fuller - показать все коммиты


##### Алиасы #####
git config --global alias.ga 'git add'
git config --global alias commitall '!git add -A; git commit'
